#!/bin/bash

# Check if running as root
if [ "$EUID" -ne 0 ]; then
    echo "‚ùå This script requires root privileges. Please run with sudo."
    exit 1
fi

# Detect distribution
if [ -f /etc/os-release ]; then
    . /etc/os-release
    DISTRO=$NAME
    VERSION=$VERSION_ID
    ID=$ID
else
    echo "‚ùå Could not detect distribution"
    exit 1
fi

# Function to install required packages based on distribution
install_required_packages() {
    echo "üì¶ Checking and installing required packages..."

    MISSING=""
    for cmd in dmidecode smartctl inxi lshw; do
        if ! command -v $cmd &>/dev/null; then
            MISSING+="$cmd "
        fi
    done

    if [ -z "$MISSING" ]; then
        echo "‚úÖ All required packages are already installed."
        return
    fi

    echo "üì¶ Missing tools: $MISSING"
    read -p "Do you want to install the missing packages? (y/N) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "‚ùå Installation cancelled. Exiting..."
        exit 1
    fi

    case $ID in
        "ubuntu"|"debian")
            apt-get update
            apt-get install -y $MISSING
            ;;
        "centos"|"rhel"|"fedora"|"rocky"|"almalinux"|"ol")
            if command -v dnf &> /dev/null; then
                dnf install -y $MISSING
            else
                yum install -y $MISSING
            fi
            ;;
        "arch"|"manjaro")
            pacman -Sy --noconfirm $MISSING
            ;;
        *)
            echo "‚ö†Ô∏è Unsupported distribution: $DISTRO ($ID)"
            echo "Please install the following packages manually: $MISSING"
            read -p "Press Enter to continue or Ctrl+C to exit..."
            ;;
    esac
}

# Install required packages
install_required_packages

# Set output file
OUTPUT="/tmp/hardware_report_$(hostname)_$(date +%Y-%m-%d_%H-%M-%S).txt"

echo "Gathering system hardware info... Output will be saved to: $OUTPUT"
echo "Hardware Report - $(hostname) - $(date)" > "$OUTPUT"
echo "==================================================" >> "$OUTPUT"

# CPU Info
echo -e "\nüß† CPU Info" >> "$OUTPUT"
echo "------------------------" >> "$OUTPUT"
lscpu >> "$OUTPUT"
echo -e "\nCPU Model: $(grep -m1 'model name' /proc/cpuinfo | cut -d':' -f2 | xargs)" >> "$OUTPUT"
echo "CPU Count: $(grep -c ^processor /proc/cpuinfo)" >> "$OUTPUT"

# RAM Info
echo -e "\nüß† RAM Info (Grouped by Device)" >> "$OUTPUT"
echo "------------------------" >> "$OUTPUT"
RAM_OUTPUT=$(dmidecode --type memory | awk '
  /^Memory Device$/ {print "\n----------------------------"}
  /^Size:|^Speed:|^Manufacturer:|^Part Number:/ {print $0}
')
if [[ -z "$RAM_OUTPUT" || "$RAM_OUTPUT" == *"No Module Installed"* ]]; then
    echo "‚ö†Ô∏è  No detailed RAM info found. This may occur on some server BIOS configurations (e.g., HPE)." >> "$OUTPUT"
    echo "Try: sudo dmidecode --type memory manually for verification." >> "$OUTPUT"
else
    echo "$RAM_OUTPUT" >> "$OUTPUT"
fi


# Disk Info
echo -e "\nüíΩ Disk Info" >> "$OUTPUT"
echo "------------------------" >> "$OUTPUT"
lsblk -o NAME,SIZE,TYPE,MODEL,SERIAL >> "$OUTPUT"

for dev in $(lsblk -dn -o NAME,TYPE | awk '$2=="disk"{print $1}'); do
    echo -e "\nSMART Info for /dev/$dev" >> "$OUTPUT"
    smartctl --info /dev/$dev >> "$OUTPUT" 2>/dev/null
done

# GPU Info
echo -e "\nüéÆ GPU Info" >> "$OUTPUT"
echo "------------------------" >> "$OUTPUT"
inxi -Gxx >> "$OUTPUT"
lspci | grep -i vga >> "$OUTPUT"
echo -e "\nFull GPU Details:" >> "$OUTPUT"
lshw -C display >> "$OUTPUT" 2>/dev/null


# Present options to the user
echo -e "\nWhat would you like to do next?"
echo "1) View report contents"
echo "2) Open with less"
read -p "Enter your choice [1-2]: " choice

case $choice in
    1)
        echo -e "\nüìÑ Report contents:"
        echo "----------------------------------------"
        cat "$OUTPUT"
        echo "----------------------------------------"
        ;;
    2)
        less "$OUTPUT"
        ;;
    *)
        echo "üëç Done. You can open the report anytime at:"
        echo "$REPORT_PATH"
        ;;
esac

# Footer
echo -e "\nüîó Generated by PCSP Hardware Info Script - https://github.com/PCSP-DevSolutions/.github" >> "$OUTPUT"

# Pretty footer with CLI tool summary (simple ASCII version)
echo -e "\n====================[ TOOL SUMMARY ]===================="
echo -e "[*] lscpu        ‚Äì Show CPU architecture info (model, cores, MHz)"
echo    "    Help: lscpu --help"
echo    "    Example: lscpu"
echo
echo -e "[*] dmidecode    ‚Äì Read system hardware info from BIOS/firmware (RAM, serials, vendor info)"
echo    "    Help: man dmidecode"
echo    "    Example: sudo dmidecode --type memory"
echo
echo -e "[*] lsblk        ‚Äì List block devices (drives, partitions, models, serials)"
echo    "    Help: lsblk --help"
echo    "    Example: lsblk -o NAME,SIZE,TYPE,MODEL,SERIAL"
echo
echo -e "[*] smartctl     ‚Äì Query SMART health/status of hard drives and SSDs"
echo    "    Help: man smartctl"
echo    "    Example: sudo smartctl --info /dev/sdX"
echo
echo -e "[*] inxi         ‚Äì Clean overview of hardware and system status (CPU, GPU, drives, etc.)"
echo    "    Help: inxi --help"
echo    "    Example: inxi -Fxx"
echo
echo -e "[*] lshw         ‚Äì Generate a full or component-specific hardware profile"
echo    "    Help: man lshw"
echo    "    Example: sudo lshw -C display"
echo
echo "Note: Install tools with:"
echo "    sudo apt install <tool>     # Debian/Ubuntu"
echo "    sudo dnf install <tool>     # RHEL/Fedora"
echo "    sudo pacman -Sy <tool>      # Arch/Manjaro"
echo
echo "üóìÔ∏è  Last Updated: 2025-05-08"
echo "üë®‚Äçüíª Author: Matt L - PCSP-DevSolutions"
echo "===================================================="


# Always show the absolute path
echo -e "\nüìÅ Full path to report: $(realpath "$OUTPUT")"
